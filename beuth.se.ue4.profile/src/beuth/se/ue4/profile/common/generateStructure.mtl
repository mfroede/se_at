[comment encoding = UTF-8 /]
[module generateStructure('http://www.eclipse.org/uml2/4.0.0/UML')]
[import beuth::se::ue4::profile::common::util /]


[template public generateStructure(model : Model)]
[EntryPoint(model)/]
[appPlaceHistoryMapper(model)/]
[activityMapper(model)/]
[gin(model)/]
[/template]

[template public EntryPoint(model : Model) ]
[file (quallyName(packageName(model.name)) + 'client/AppEntryPoint.java', false, 'UTF-8')]
package [packageName(model.name)/]client;

import [packageName(model.name)/]client.common.AppPlaceHistoryMapper;
import [packageName(model.name)/]client.gin.AppGinjector;

import com.google.gwt.activity.shared.ActivityManager;
import com.google.gwt.activity.shared.ActivityMapper;
import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.place.shared.PlaceHistoryHandler;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.SimplePanel;
import com.google.web.bindery.event.shared.EventBus;

public class AppEntryPoint implements EntryPoint {

	@Override
	public void onModuleLoad() {

		AppGinjector injector = GWT.create(AppGinjector.class);
		EventBus eventBus = injector.getEventBus();

		ActivityMapper activityMapper = injector.getActivityMapper();

		SimplePanel content = new SimplePanel();
		ActivityManager contentActivityManager = new ActivityManager(
				activityMapper, eventBus);
		contentActivityManager.setDisplay(content);

//--------------------------------------------------
[for (interface : Interface | model.ownedElement)]

[/for]
[for (class : Class | model.ownedElement)]
	[if (class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('PermanentViewImpl') or class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Header') or class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Footer'))]
		ActivityMapper activityMapper[getClassName(class)/] = injector
				.getNavigationViewActivityMapper();
		SimplePanel [getClassName(class).toLowerFirst()/] = new SimplePanel();

		ActivityManager contentActivityManager[class.name/] = new ActivityManager(
				activityMapper[getClassName(class)/], eventBus);
		contentActivityManager[getClassName(class)/].setDisplay([class.name.toLowerFirst()/]);
	[/if]
[/for]

//--------------------------------------------------

[for (class : Class | model.ownedElement)]
	[if ( class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Header') )]
		RootPanel.get().add( [getClassName(class).toLowerFirst()/] );
	[/if]
[/for]
		RootPanel.get().add( content );
[for (class : Class | model.ownedElement)]
	[if ( class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('PermanentViewImpl') )]
		RootPanel.get().add( [getClassName(class).toLowerFirst()/] );
	[/if]
[/for]
[for (class : Class | model.ownedElement)]
	[if ( class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Footer') )]
		RootPanel.get().add( [getClassName(class).toLowerFirst()/] );
	[/if]
[/for]

		AppPlaceHistoryMapper historyMapper = GWT
				.create(AppPlaceHistoryMapper.class);
		PlaceHistoryHandler historyHandler = new PlaceHistoryHandler(
				historyMapper);
		historyHandler.register(injector.getPlaceController(), eventBus,
				new YourStartHerePlace());

		historyHandler.handleCurrentHistory();
	}
}

[/file]
[/template]

[template public appPlaceHistoryMapper(model : Model) ]
[file (packageName(model.name).replaceAll('[.]', '/') + 'client/common/AppPlaceHistoryMapper.java', false, 'UTF-8')]
package [packageName(model.name)/]client.common;


[for (class : Class | model.ownedElement)]
import [packageName(model.name)/]client.view.[getClassName(class)/]Place;
[/for]

import com.google.gwt.place.shared.PlaceHistoryMapper;
import com.google.gwt.place.shared.WithTokenizers;

@WithTokenizers({ 
	[for (class : Class | model.ownedElement)]
		[getClassName(class)/]Place.Tokenizer.class,
	[/for] })
public interface AppPlaceHistoryMapper extends PlaceHistoryMapper {

}
[/file]
[/template]

[template public activityMapper(model : Model) ]
[for (class : Class | model.ownedElement)]
	[if (class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('PermanentViewImpl') or class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Header') or class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Footer'))]
[file (packageName(model.name).replaceAll('[.]', '/') + 'client/common/'+getClassName(class)+'ViewActivityMapper.java', false, 'UTF-8')]
package [packageName(model.name)/]client.common;

import [packageName(model.name)/]client.view.[getClassName(class)/]Activity;

import com.google.gwt.activity.shared.Activity;
import com.google.gwt.activity.shared.ActivityMapper;
import com.google.gwt.place.shared.Place;
import com.google.inject.Inject;
import com.google.inject.Provider;

public class [getClassName(class)/]ViewActivityMapper implements ActivityMapper {

	
	@Inject
	Provider<[getClassName(class)/]Activity> [getClassName(class).toLowerFirst()/]ActivityProvider;
	
	@Override
	public Activity getActivity(Place place) {
		return [getClassName(class).toLowerFirst()/]ActivityProvider.get();
	}

}
[/file]
	[/if]
[/for]
[file (packageName(model.name).replaceAll('[.]', '/') + 'client/common/ActivityMapperImpl.java', false, 'UTF-8')]
package [packageName(model.name)/]client.common;

[for (class : Class | model.ownedElement)]
[if (not class.getAllImplementedInterfaces()->asOrderedSet()->first().getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('View') )]
import [packageName(model.name)/]client.view.[getClassName(class)/]Activity;
import [packageName(model.name)/]client.view.[getClassName(class)/]Place;
	[/if]
[/for]
import com.google.gwt.activity.shared.Activity;
import com.google.gwt.activity.shared.ActivityMapper;
import com.google.gwt.place.shared.Place;
import com.google.inject.Inject;
import com.google.inject.Provider;

public class ActivityMapperImpl implements ActivityMapper {
	
[for (class : Class | model.ownedElement)]
	[if (class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('PermanentViewImpl')._not() and class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Header')._not() and class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Footer')._not())]
	@Inject
	Provider<[class.name/]Activity> [getClassName(class).toLowerFirst()/]ActivityProvider;	
[/if]
[/for]
	
	@Override
	public Activity getActivity(Place place) {
[for (class : Class | model.ownedElement)]
	[if (class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('PermanentViewImpl')._not() and class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Header')._not() and class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Footer')._not())]
	if (place instanceof [getClassName(class)/]Place) {
			return [getClassName(class).toLowerFirst()/]ActivityProvider.get();
		}
	[/if]
[/for]
		return null;
	}

}
[/file]
[/template]

[template public gin(model : Model) ]

[file (packageName(model.name).replaceAll('[.]', '/') + 'client/common/gin/AppGinjector.java', false, 'UTF-8')]
package [packageName(model.name)/]client.common.gin;

import [packageName(model.name)/]client.common.ActivityMapperImpl;
[for (class : Class | model.ownedElement)]
	[if (class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('PermanentViewImpl') or class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Header') or class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Footer'))]
import [packageName(model.name)/]client.common.[getClassName(class)/]ViewActivityMapper;
	[/if]
[/for]


import com.google.gwt.inject.client.GinModules;
import com.google.gwt.inject.client.Ginjector;
import com.google.gwt.place.shared.PlaceController;
import com.google.web.bindery.event.shared.EventBus;

@GinModules(ProductionGinModule.class)
public interface AppGinjector extends Ginjector {

	public EventBus getEventBus();

	public PlaceController getPlaceController();

	public ActivityMapperImpl getActivityMapper();
[for (class : Class | model.ownedElement)]
	[if (class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('PermanentViewImpl') or class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Header') or class.getAppliedStereotypes()->asOrderedSet()->first().name.endsWith('Footer'))]
	public [getClassName(class)/]ViewActivityMapper get[getClassName(class)/]ViewActivityMapper();
[/if]
[/for]
}
[/file]

[file (packageName(model.name).replaceAll('[.]', '/') + 'client/common/gin/ProductionGinModule.java', false, 'UTF-8')]
package [packageName(model.name)/]client.common.gin;

import javax.inject.Singleton;

import [packageName(model.name)/]client.common.ActivityMapperImpl;
[for (class : Class | model.ownedElement)]
import [packageName(model.name)/]client.view.[getClassName(class)/]View;
import [packageName(model.name)/]client.view.[class.name/]ViewImpl;
[/for]

import com.google.gwt.inject.client.AbstractGinModule;
import com.google.gwt.place.shared.PlaceController;
import com.google.web.bindery.event.shared.EventBus;
import com.google.web.bindery.event.shared.SimpleEventBus;

public class ProductionGinModule extends AbstractGinModule {

	@Override
	protected void configure() {
		bind(EventBus.class).to(SimpleEventBus.class).in(Singleton.class);
		bind(PlaceController.class).toProvider(PlaceControllerProvider.class)
				.in(Singleton.class);
		bind(ActivityMapperImpl.class).in(Singleton.class);

		bind(YourStartHereActivity.class);

[for (class : Class | model.ownedElement)]
[comment]		[if (class.getValue(model.getApplicableStereotype('ViewImpl'), 'concreteBind').toString().endsWith('true') or class.getValue(model.getApplicableStereotype('Header'), 'concreteBind').toString().endsWith('true')or class.getValue(model.getApplicableStereotype('Footer'), 'concreteBind').toString().endsWith('true')or class.getValue(model.getApplicableStereotype('PermanentView'), 'concreteBind').toString().endsWith('true'))][/comment]
[comment]			[if (property.name.endsWith('concreteBind') and property.getValue('Property', propertyName).endsWith('true'))][/comment]
		bind([getClassName(class)/]View.class).to([class.name/]ViewImpl.class).in(Singleton.class);
[comment]			[elseif(property.name.endsWith('concreteBind') and property.default.endsWith('false'))][/comment]
[comment]		[else][/comment]
[comment]		// bind([getClassName(class)/]View.class).to([class.name/]ViewImpl.class).in(Singleton.class);[/comment]
[comment]			[/if][/comment]
[comment]		[/for]		[/comment]
[/for]
	}
}
[/file]

[/template]
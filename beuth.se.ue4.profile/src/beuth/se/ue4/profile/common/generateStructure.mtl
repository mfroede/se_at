[comment encoding = UTF-8 /]
[module generateStructure('http://www.eclipse.org/uml2/4.0.0/UML')]


[template public generateStructure(model : Model)]
[configXML(model)/]
[EntryPoint(model)/]

[/template]

[template public qualliName(model : Model)]
	[model.name.replaceAll('[.]', '/')/]
[/template]

[template public packageName(model : Model)]
	[model.name.substring( 1, model.name.lastIndexOf('.') )/]
[/template]

[template public configXML(model : Model)]
[file (qualliName(model) + '.xml', false, 'UTF-8')]
<?xml version="1.0" encoding="UTF-8"?>
<!-- When updating your version of GWT, you should also update this DTD reference, 
	so that your app can take advantage of the latest GWT module capabilities. -->
<!DOCTYPE module PUBLIC "-//Google Inc.//DTD Google Web Toolkit 2.5.0//EN"
  "http://google-web-toolkit.googlecode.com/svn/tags/2.5.0/distro-source/core/src/gwt-module.dtd">
<module rename-to='[model.name.substring(model.name.lastIndexOf('.') + 1, model.name.size())/]'>
	<!-- Inherit the core Web Toolkit stuff. -->
	<inherits name='com.google.gwt.user.User' />

	<!-- Inherit the default GWT style sheet. You can change -->
	<!-- the theme of your GWT application by uncommenting -->
	<!-- any one of the following lines. -->
	<!-- <inherits name='com.google.gwt.user.theme.clean.Clean' /> -->
	<inherits name='com.google.gwt.user.theme.standard.Standard'/>
	<!-- <inherits name='com.google.gwt.user.theme.chrome.Chrome'/> -->
	<!-- <inherits name='com.google.gwt.user.theme.dark.Dark'/> -->

	<inherits name='com.google.gwt.activity.Activity' />
	<inherits name='com.google.gwt.place.Place' />
	<inherits name="com.google.gwt.i18n.I18N" />
	<inherits name='org.fusesource.restygwt.RestyGWT' />
	<inherits name="com.google.gwt.inject.Inject" />

	<!-- Specify the app entry point class. -->
	<entry-point class='[model.name.substring( 1, model.name.lastIndexOf('.') )/]client.AppEntryPoint' />

	<!-- Specify the paths for translatable code -->
	<source path='client' />
</module>
[packageName(model).replaceAll('[.]', '/') + 'client/AppEntryPoint.java'/]
[/file]
[/template]

[template public EntryPoint(model : Model)]
[file (packageName(model).replaceAll('[.]', '/') + 'client/AppEntryPoint.java', false, 'UTF-8')]
package [model.name.substring( 1, model.name.lastIndexOf('.') )/]client;

import [model.name.substring( 1, model.name.lastIndexOf('.') )/]client.common.AppPlaceHistoryMapper;
import [model.name.substring( 1, model.name.lastIndexOf('.') )/]client.gin.AppGinjector;
import [model.name.substring( 1, model.name.lastIndexOf('.') )/]client.modules.start.StartPlace;
import org.fusesource.restygwt.client.Defaults;

import com.google.gwt.activity.shared.ActivityManager;
import com.google.gwt.activity.shared.ActivityMapper;
import com.google.gwt.core.client.EntryPoint;
import com.google.gwt.core.client.GWT;
import com.google.gwt.place.shared.PlaceHistoryHandler;
import com.google.gwt.user.client.ui.Label;
import com.google.gwt.user.client.ui.RootPanel;
import com.google.gwt.user.client.ui.SimplePanel;
import com.google.web.bindery.event.shared.EventBus;

public class AppEntryPoint implements EntryPoint {
	static {
		// if you don't do this, on JSON response you'll get something like
		// this:
		// "Could not parse response: org.fusesource.restygwt.client.ResponseFormatException: Response was NOT a valid JSON document"
		Defaults.setDateFormat(null);
	}

	@Override
	public void onModuleLoad() {

		AppGinjector injector = GWT.create(AppGinjector.class);
		EventBus eventBus = injector.getEventBus();

		ActivityMapper activityMapper = injector.getActivityMapper();

		SimplePanel content = new SimplePanel();
		ActivityManager contentActivityManager = new ActivityManager(
				activityMapper, eventBus);
		contentActivityManager.setDisplay(content);

		ActivityMapper activityMapper2 = injector
				.getNavigationViewActivityMapper();
		SimplePanel navigation = new SimplePanel();

		ActivityManager contentActivityManager2 = new ActivityManager(
				activityMapper2, eventBus);
		contentActivityManager2.setDisplay(navigation);

		RootPanel.get().add(navigation);
		RootPanel.get().add(content);

		AppPlaceHistoryMapper historyMapper = GWT
				.create(AppPlaceHistoryMapper.class);
		PlaceHistoryHandler historyHandler = new PlaceHistoryHandler(
				historyMapper);
		historyHandler.register(injector.getPlaceController(), eventBus,
				new StartPlace());

		historyHandler.handleCurrentHistory();
	}
}

[/file]
[/template]
